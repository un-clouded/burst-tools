// Generated by CoffeeScript 1.10.0
(function() {
  var ArcChart, BUCKETS, BUCKET_COUNT, Bucket, NONCES_PER_BUCKET, TOTAL_NONCE_COUNT, chart, elm, j, p, parse, ref, render, results;

  p = function() {
    return console.log.apply(this, arguments);
  };

  elm = function(tag, attributes, builder) {
    var add, child, children, el, j, len, name, value, xmlns;
    if (builder == null) {
      builder = void 0;
    }
    if (arguments.length < 3 && !$.isPlainObject(attributes)) {
      builder = attributes;
      attributes = {};
    }
    xmlns = attributes.xmlns;
    el = xmlns != null ? document.createElementNS(xmlns, tag) : document.createElement(tag);
    for (name in attributes) {
      value = attributes[name];
      el.setAttribute(name, value);
    }
    add = function(el, child) {
      if (typeof child === typeof '') {
        child = document.createTextNode(child);
      }
      return el.appendChild(child);
    };
    if (builder != null) {
      children = typeof builder === typeof Function ? builder() : builder;
      if ($.isArray(children)) {
        for (j = 0, len = children.length; j < len; j++) {
          child = children[j];
          add(el, child);
        }
      } else {
        add(el, children);
      }
    }
    return el;
  };

  Bucket = (function() {
    function Bucket(first_nonce1) {
      this.first_nonce = first_nonce1;
      this.next_nonce = this.first_nonce.plus(NONCES_PER_BUCKET);
      this.reset();
    }

    Bucket.prototype.reset = function() {
      return this.nonces = Big(0);
    };

    Bucket.prototype.consider = function(first_nonce, nonce_count) {
      var length, next_nonce;
      next_nonce = first_nonce.plus(nonce_count);
      if (first_nonce.lt(this.first_nonce)) {
        first_nonce = this.first_nonce;
      }
      if (this.next_nonce.lt(next_nonce)) {
        next_nonce = this.next_nonce;
      }
      length = next_nonce.minus(first_nonce);
      if (!length.lt(0)) {
        return this.nonces = this.nonces.plus(length);
      }
    };

    Bucket.prototype.toString = function() {
      return {
        first_nonce: this.first_nonce.toString(),
        nonces: this.nonces.toString()
      };
    };

    return Bucket;

  })();

  ({
    ArcChart: ArcChart = (function() {
      function ArcChart(canvas_element1) {
        this.canvas_element = canvas_element1;
      }

      ArcChart.prototype.show = function(values, styler) {
        var center_x, center_y, ct, from_angle, full_sweep, i, inner_radius, j, len, radius, results, scale, sweep, to_angle, to_north, value, x, y;
        ct = this.canvas_element.getContext('2d');
        radius = this.canvas_element.height / 2 - 16;
        center_x = this.canvas_element.width / 2;
        center_y = this.canvas_element.height / 2;
        inner_radius = radius / 2;
        to_north = 2 * Math.PI * -1 / 4;
        full_sweep = 2 * Math.PI;
        results = [];
        for (i = j = 0, len = values.length; j < len; i = ++j) {
          value = values[i];
          scale = values.length;
          from_angle = full_sweep * i / scale;
          sweep = full_sweep / scale;
          to_angle = from_angle + sweep;
          ct.fillStyle = styler(value, i);
          ct.beginPath();
          ct.arc(center_x, center_y, radius, to_north + from_angle, to_north + to_angle);
          x = center_x + Math.sin(to_angle) * inner_radius;
          y = center_y - Math.cos(to_angle) * inner_radius;
          ct.lineTo(x, y);
          ct.arc(center_x, center_y, inner_radius, to_north + to_angle, to_north + from_angle, true);
          results.push(ct.fill());
        }
        return results;
      };

      return ArcChart;

    })()
  });

  BUCKET_COUNT = 128;

  TOTAL_NONCE_COUNT = Big("18446744073709551616");

  NONCES_PER_BUCKET = TOTAL_NONCE_COUNT.div(BUCKET_COUNT);

  BUCKETS = (function() {
    results = [];
    for (var j = 0, ref = BUCKET_COUNT - 1; 0 <= ref ? j <= ref : j >= ref; 0 <= ref ? j++ : j--){ results.push(j); }
    return results;
  }).apply(this).map(function(i) {
    return new Bucket(NONCES_PER_BUCKET.times(i));
  });

  parse = function(data) {
    var bucket, file_name, first_nonce, groups, k, l, len, len1, len2, len3, line, lines, m, nonce_count, o, ref1, results1;
    for (k = 0, len = BUCKETS.length; k < len; k++) {
      bucket = BUCKETS[k];
      bucket.reset();
    }
    lines = data.trim().split("\n");
    for (l = 0, len1 = lines.length; l < len1; l++) {
      line = lines[l];
      groups = line.match(/[^\\\/]+$/);
      file_name = groups[0];
      if (groups = file_name.match(/^\d+_(\d+)_(\d+)_\d+$/)) {
        ref1 = groups.slice(1, 3), first_nonce = ref1[0], nonce_count = ref1[1];
        for (m = 0, len2 = BUCKETS.length; m < len2; m++) {
          bucket = BUCKETS[m];
          bucket.consider(Big(first_nonce), Big(nonce_count));
        }
      } else {
        throw "Unexpected form: " + file_name;
      }
    }
    results1 = [];
    for (o = 0, len3 = BUCKETS.length; o < len3; o++) {
      bucket = BUCKETS[o];
      results1.push(p(bucket.toString()));
    }
    return results1;
  };

  chart = null;

  render = function() {
    var bucket, emptiest_bucket, fullest_bucket, k, len, range, styler;
    emptiest_bucket = BUCKETS[0];
    fullest_bucket = BUCKETS[0];
    for (k = 0, len = BUCKETS.length; k < len; k++) {
      bucket = BUCKETS[k];
      if (bucket.nonces.lt(emptiest_bucket.nonces)) {
        emptiest_bucket = bucket;
      }
      if (bucket.nonces.gt(fullest_bucket.nonces)) {
        fullest_bucket = bucket;
      }
    }
    range = fullest_bucket.nonces.plus(1).minus(emptiest_bucket.nonces);
    styler = function(bucket, i) {
      var color, intensity, rgb, scale, to_hex;
      scale = 360 * 2 / 3;
      intensity = Math.round((bucket.nonces.minus(emptiest_bucket.nonces)).times(scale).div(range));
      color = new HSV(0.01 + scale - intensity, 75, 90);
      rgb = ColorConverter.toRGB(color);
      to_hex = function(n) {
        n = n.toString(16);
        if (n.length === 1) {
          n = "0" + n;
        }
        return n;
      };
      return "#" + [rgb.r, rgb.g, rgb.b].map(to_hex).join('');
    };
    return chart.show(BUCKETS, styler);
  };

  $(document).ready(function() {
    var attributes, button, canvas, canvas_element, input, textarea, viewport_height, viewport_width;
    button = $('#button');
    input = $('#input');
    textarea = input.find('textarea');
    viewport_width = document.body.clientWidth;
    viewport_height = document.documentElement.clientHeight;
    attributes = {
      width: viewport_width,
      height: viewport_height
    };
    canvas_element = elm('canvas', attributes);
    ($('#canvas_box')).append(canvas_element);
    canvas = $(canvas_element);
    chart = new ArcChart(canvas_element);
    button.click(function() {
      button.fadeOut('fast');
      return input.fadeIn('fast');
    });
    return textarea.on('input', function() {
      parse(textarea.val());
      render();
      input.fadeOut('fast');
      return canvas.fadeIn('fast');
    });
  });

}).call(this);
